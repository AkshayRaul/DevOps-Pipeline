---
- name: Copy SSH keys to Jenkins Server
  copy:
    src: /keys/ansible-jenkins-srv_id_rsa
    dest: /home/vagrant/.ssh/ansible-jenkins-srv_id_rsa
    mode: 0600

- name: Evaluating the authentication agent & adding the key...
  shell: |
    eval "$(ssh-agent)"
    ssh-add ~/.ssh/ansible-jenkins-srv_id_rsa
  args:
    executable: /bin/bash

- name: Get private key
  command: cat ~/.ssh/ansible-jenkins-srv_id_rsa
  register: private_key
 
- name: Install pip3
  become: yes
  apt: pkg=python3-pip update_cache=yes

- name: Install easy_install
  become: yes
  yum:
    name: python3-setuptools

- name: Install python-jenkins
  become: yes
  easy_install:
    executable: easy_install3
    name: python-jenkins
    state: latest
  
- name: Get Jenkins crumb
  uri:
    user: jenkins
    password: "Jenkins@6"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/crumbIssuer/api/json"
    return_content: yes
  register: crumb_token
  until: crumb_token.content.find('Please wait while Jenkins is getting ready') == -1
  retries: 10
  delay: 5

- name: Set crumb token
  set_fact:
    crumb: "{{ crumb_token.json.crumb }}"

- debug:
    var: adminpwd.stdout


# - name: Create Jenkins credentials for git ssh
#   uri:
#     user: jenkins
#     password: "Jenkins@6"   
#     force_basic_auth: yes
#     headers:
#       Content-Type: application/xml
#       Jenkins-Crumb: "{{crumb}}"
#     url: "http://192.168.20.20:8080/credentials/store/system/domain/_/createCredentials&Jenkins-Crumb={{ crumb }}"
#     body: |
#       json = {
#         "": "0",
#         "credentials": {
#           "scope": "GLOBAL",
#           "id": "jenkins",
#           "username": "Jenkins@6",
#           "password": "",
#           "privateKeySource": {
#           "stapler-class": "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource",
#             "privateKey": "{{private_key}}",
#           },
#           "description": "Ansible key",
#           "stapler-class": "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey"
#         }
#       }
#     method: POST
#     status_code: [200, 302]


- name: Install plugins
  uri:
    user: jenkins
    password: "Jenkins@6"   
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/pluginManager/install?plugin.{{ item }}.default=on&Jenkins-Crumb={{ crumb }}"
    method: POST
    status_code: [200, 302]
  with_items: "{{ jenkins_plugins }}"

- name: Immediately restart Jenkins on http or user changes.
  become: yes
  systemd:
    name: jenkins 
    state: restarted 
- name: Ensure Jenkins is up and running
  uri:
    url: http://localhost:8080?Jenkins-Crumb={{ crumb }}
    user: jenkins
    password: "Jenkins@6"   
    force_basic_auth: yes
    status_code: 200
    timeout: 5
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: 10
  delay: 5
  until: >
    jenkins_service_status.status == 200
  

- name: Get list of jobs
  uri: 
    url: "http://192.168.20.20:8080/api/json?tree=jobs[name]&Jenkins-Crumb={{ crumb }}" 
    force_basic_auth: yes
    return_content: yes
    user: jenkins
    password: "Jenkins@6"
    method: GET
  register: jobs


- name: Check if checkbox job exists
  set_fact:
    seed_exists: "{{ checkbox_name in jobs.json.jobs|map(attribute='name')|list }}"
    
- name: Create Jenkins credentials for git ssh
  jenkins_script:
    script: |
      import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.common.*
      import com.cloudbees.plugins.credentials.domains.Domain
      import com.cloudbees.plugins.credentials.impl.*
      import hudson.util.Secret
      import java.nio.file.Files
      import jenkins.model.Jenkins
      import net.sf.json.JSONObject
      import org.jenkinsci.plugins.plaincredentials.impl.*

      // parameters
      def jenkinsMasterKeyParameters = [
        description:  'Jenkins Master SSH Key',
        id:           'mykey',
        secret:       '',
        userName:     'jenkins',
        key:          new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource('''-----BEGIN RSA PRIVATE KEY-----
                  MIIJKAIBAAKCAgEAqPmEYSNho56PuTQ/jf6Qb78Owb44ujhLWYFCryX/D/az3FAk
                  fMOw6Qz06S0jOLKQaiMKBDNQkEZx/Mf1H74a+dbVP++AOCdjIARIwpSPDOWfIqmI
                  Q1n6EcsKP9rgda6zxyAiDO9ei0RRiA6Kp7fpXh1OMHHx5hzWvPyqgubTcXff1QcX
                  r3odAiLu/wWt/1FbZ+gk2NrBjKNJiZNCI8yLCuNk4ES+2Tk0H26NU3dw6TgnbdNs
                  X7ecVwpPSrkcMK43bcmWz/J/MXO/2HEZNKbMBVYjXxGlORG+Nvg069DoQoGnRg/b
                  n8SW0oeLctlZkcnEAX49NFakDtszzS9ru+hH5DBCP07KVWp7DAoXkbbdwuUCUAr9
                  IF57Q0rp84CDr24EoXOuOHiK5lf5IdKC2JFvhYvNM6sf3SHSjHOzqVyv7piW9fGq
                  NiAbQaE4ja+XJWtV3qw8GVyRKerDyZUo2vcTW9MsNDwH8TIirEf348pmeRO3T2mI
                  0t2/iyMsY8S/hkq/GUS/t2h+5WLHQGkMHpHrMWjGVEnyg8EVpOVLxPNYKQllpIHE
                  3KsQhrogQnb4gVPPMl3w7haHYnYGEyd/STPb94Crr5SQLUWgW10iemE42p36M5Zq
                  WjWCJh1D3qKGNtL5aJZl87NpZWSPoDOvBmaZ5pd3p/NCyWJ4p9upIoFjPVkCAwEA
                  AQKCAgBRyAn5Fa3BChIXmiEUcVuoqfjTbmR4RJy7YiNLMAGl0Uo13Bf8xp3N/bZf
                  ULhWTZ41sGW9qLRaT64FoSWTSmg1+XNWsW0GQJHqQgiRHGOr40rE9PZ9WoP8rp90
                  TlQKwRZDztqMFiJVFyi6yAb1q75oDZj1O4DPVa/c4hEIr/0wUstjiD4/cMOvcAbq
                  KO6QvuiVfrauuhmpHrKNwlbliq7VAz+kh8Ey00vV1qTR++ILDmGO9x/hp7UkL1o3
                  GSZ6rSconMPAO2ayIYp9kCeZ4wylnI4cCidEWsEMS88ZPw/aeHPkJfKu/e/dTzr/
                  yBBgzh1ud5HZzgEzK4aDzWrAFGkOT6Oa3OuqCPmYGZZ/Z8H/lSvRxcnVG9UyjFpe
                  yjXhnBfsJzhjFLqyIQfoSO31sbNJkmxQ1XmMEOdYwqmK8nhCSJM5WiUDZQ/X6hpc
                  ophsS4iGExqqB5/LpodZunDdrxJbljD86iJUp34xCs1LPHqcaB3QmUEppIfYrMUk
                  crUm6OhUy/u5IcKcpeGGATd26XIi9ljs1GwgSjNd1ejO42HLQBXq569bfhhwDfEf
                  rVoCM9h6jMeiZQXNsOgf4f7d7T8aPHaOSipJVzoEVyM21K/CDIUtdX8SENeDZaEc
                  Ob7cKlVDuuZkfk1v/KVDhEGVYBpOYPAiHnedSiYoL6J/9RKTvQKCAQEA1YvF0aho
                  //O55rk5uGOwdcZ9FM+QNoJNCILGDHWlo/AQdNwd1eWLH0Yap4uYn/WJT50VwcL0
                  efDyToLDX7GLAZtc/6eUJ7glhQ0u0dUBcIlH6Z8KBZ8BVJIR7i3V2c9FBh0jmLF1
                  BvO5ulcGizv3r8+vcVqVU5YF33vaWlcV4iP1GeH1QzAru5wLyKtLr8SrZZ9JL5xR
                  5xxmNvvxyUmL7tVCoclyMR9X0qluwGriSOziBCL4mUuhvK5UElgmvFFa2kSP/gEx
                  +D+DyY8FZ3p8NtdZWYAEs+6HXekxTfD6EhbkfB3AWYeu/N3ETRTX64tS+twYSGQT
                  EPQZNEt34qOKIwKCAQEAypFUD1cWMaHGzRgaXODqmGZj6uwb8kQ2MUDKlJloUt6H
                  p/9779RYmcR1Yo5W7H0lmcVH12kE0co7Sco7YtSPR1wLgicyjR+Sq+zxyetwqVEu
                  LDsmraL3BVaTMqRnAaWpHQlbp+NIeeZcnuW3b8EBAEKPy3xujGsHuZ9miumf45qq
                  4DbsqMB296yhiXQB1yhWDSEHdcnBfHN8aawDEkp6cssdOB85lmBZpwqAuXxH0l/W
                  Qrhohq7MH1X7CDefwh23Pz4b9V7XxzirNaq7zFs6ceSNuHv11bHV5QRR5YsPh+KG
                  CdEDzMuao/1/df0TsiztYdC3K2aYaOEejyGv4sH8UwKCAQBJ8jqwHScu6pEHSkCo
                  jyy9u9v4Zt/DYF+YgOBf1CVlnW21abuTJAeG7tmwBvD1AytnPDgafo314++kLDfH
                  XU2LYudTSA5Pqr6jUitSUfZLp94VEhOAWs01Ide/qHOTFukJ8vEuoNSrcZ5w3k3P
                  zRY59SsFj56B8UNbXiIAgoN7aYQoUEyD1ZxvPNv/wwFUfj/z0rKfH/xkkTr780aI
                  s0UXkRWfvIgkZnwc4LsPOnPdWNnzIMEBJGV/VsaaC5huQaW6S1+pT3SkSCo0k6gF
                  ay60NuIj0ebO/9w0Mtn16WpO9UptiEfhONDpk0m0f3E9iWNUpv5pou3PQxevOirr
                  ekINAoIBACfC3v0j2vdjCeK4GHSisWm4r2QtdE7ZlMmWLi187z1U8MvJGkq5I6sL
                  JP9zcRx6dCb60l81/fwv9fNF/uInVvhq2NdzWjjZObEFkXBRBow1oxqLgcwTcOlb
                  VQlbu9xW6BsK+zK5KkDDNur5rEgDWm7yoccPZaOqXpnQ8A/US84hTek03r9BCBkV
                  iZ+xZasV/84T7aLxN0l2YbVcTj4I4IAn3lRlzKf3waFILnw6KN7icOwnxlypcuez
                  uNKkGHfB3XZMerBvLWutc+3U1YgHYDF661aK/nYzsgiCEJE9+o5xqF3E6ToJvRDz
                  cVF3m6Ydq3rHvSyHtuLfTWBK/HtGGIECggEBAMXM4KSngNKpTCApjFpvEI3TvJtp
                  8A2Mvhj/M0pXkBIDxcBFqF/0cYXnGpPc/AgPekh/vEyOOGOSh3dplswXie231Bod
                  6h8d2I8Pn7dTl/Po1jSMpwXDQu2PlrTr9+zcRZfGgJc4f6nU4PeD5CdUyBCtvJsG
                  DrnJ2NVUhgRXkCwn8Whe+le9GUKo3athetUZ7lKrbxz0bs2KHniUURpWltfmG+EM
                  g08w319Gyq9XEdfcdyoxUDCoiyhyV1AYx+tHiMYidkadnKJVXHUC2YapTKtEfK1o
                  cJmno7sstGUNY0o6+sPve4CIECE4NSMCQdE/K1JPAvF+yZwHlVUZacX+a5M=
                  -----END RSA PRIVATE KEY-----''')]

      // get Jenkins instance
      Jenkins jenkins = Jenkins.getInstance()

      // get credentials domain
      def domain = Domain.global()

      // get credentials store
      def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      // define private key
      def privateKey = new BasicSSHUserPrivateKey(
        CredentialsScope.GLOBAL,
        jenkinsMasterKeyParameters.id,
        jenkinsMasterKeyParameters.userName,
        jenkinsMasterKeyParameters.key,
        jenkinsMasterKeyParameters.secret,
        jenkinsMasterKeyParameters.description
      )

      // add credential to store
      store.addCredentials(domain, privateKey)

      // save to disk
      jenkins.save()
    user: jenkins
    password: Jenkins@6
- name: Create checkbox job
  uri:
      url: "http://localhost:8080/createItem?name={{checkbox_name}}&mode=org.jenkinsci.plugins.workflow.job.WorkflowJob" 
      method: POST
      headers:
        Content-Type: application/xml
        Jenkins-Crumb: "{{crumb}}"
      body: "{{ lookup('file', './templates/config.xml' ) }}"
      user: jenkins
      password: "Jenkins@6"
      force_basic_auth: yes
  register: jenkins_seed_updated
  when: not seed_exists

- name: Build Job
  uri:
      url: "http://localhost:8080/job/{{ checkbox_name }}/build"
      method: POST
      user: jenkins
      password: "Jenkins@6"
      force_basic_auth: yes
      headers:
        Content-Type: application/xml
        Jenkins-Crumb: "{{crumb}}"
      status_code: 201
  # when: jenkins_seed_updated|success

- name: Check if iTrust job exists
  set_fact:
    seed_exists: "{{ iTrust_name in jobs.json.jobs|map(attribute='name')|list }}"

- name: Create iTrust job
  uri:
    url: "http://localhost:8080/createItem?name={{iTrust_name}}&mode=org.jenkinsci.plugins.workflow.job.WorkflowJob" 
    method: POST
    headers:
      Content-Type: application/xml
      Jenkins-Crumb: "{{crumb}}"
    body: "{{ lookup('file', './templates/iTrustConfig.xml' ) }}"
    user: jenkins
    password: "Jenkins@6"
    force_basic_auth: yes
    register: jenkins_seed_updated
  when: not seed_exists

- name: Build Job
  uri:
    url: "http://localhost:8080/job/{{ iTrust_name }}/build"
    method: POST
    user: jenkins
    password: "Jenkins@6"
    force_basic_auth: yes
    headers:
      Content-Type: application/xml
      Jenkins-Crumb: "{{crumb}}"
    status_code: 201
  when: jenkins_seed_updated|success

- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    update_cache: yes
    cache_valid_time: 86400 #One day
  

  
  
    

  
