---
- name: Copy SSH keys to Jenkins Server
  copy:
    src: /keys/ansible-jenkins-srv_id_rsa
    dest: /home/vagrant/.ssh/ansible-jenkins-srv_id_rsa
    mode: 0600

# - name: Get private key
#   command: cat ~/.ssh/ansible-jenkins-srv_id_rsa
#   register: private_key
 
- name: Install pip3
  become: yes
  apt: pkg=python3-pip update_cache=yes

- name: Install easy_install
  become: yes
  yum:
    name: python3-setuptools

- name: Install python-jenkins
  become: yes
  easy_install:
    executable: easy_install3
    name: python-jenkins
    state: latest
  
- name: Get Jenkins crumb
  uri:
    user: jenkins
    password: "{{jenkins_password}}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/crumbIssuer/api/json"
    return_content: yes
  register: crumb_token
  until: crumb_token.content.find('Please wait while Jenkins is getting ready') == -1
  retries: 10
  delay: 5

- name: Set crumb token
  set_fact:
    crumb: "{{ crumb_token.json.crumb }}"

- name: Install plugins
  uri:
    user: jenkins
    password: "{{jenkins_password}}"   
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/pluginManager/install?plugin.{{ item }}.default=on&Jenkins-Crumb={{ crumb }}"
    method: POST
    status_code: [200, 302]
  with_items: "{{ jenkins_plugins }}"

- name: Immediately restart Jenkins on http or user changes.
  become: yes
  systemd:
    name: jenkins 
    state: restarted 
- name: Ensure Jenkins is up and running
  uri:
    url: http://localhost:8080?Jenkins-Crumb={{ crumb }}
    user: jenkins
    password: "{{jenkins_password}}"   
    force_basic_auth: yes
    status_code: 200
    timeout: 5
  register: jenkins_service_status
  # Keep trying for 5 mins in 5 sec intervals
  retries: 20
  delay: 5
  until: >
    jenkins_service_status.status == 200
  

- name: Get list of jobs
  uri: 
    url: "http://192.168.20.20:8080/api/json?tree=jobs[name]&Jenkins-Crumb={{ crumb }}" 
    force_basic_auth: yes
    return_content: yes
    user: jenkins
    password: "{{jenkins_password}}"
    method: GET
  register: jobs


- name: Check if checkbox job exists
  set_fact:
    seed_exists: "{{ checkbox_name in jobs.json.jobs|map(attribute='name')|list }}"
    
- name: Create Jenkins credentials for git ssh
  jenkins_script:
    script: |
      import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.common.*
      import com.cloudbees.plugins.credentials.domains.Domain
      import com.cloudbees.plugins.credentials.impl.*
      import hudson.util.Secret
      import java.nio.file.Files
      import jenkins.model.Jenkins
      import net.sf.json.JSONObject
      import org.jenkinsci.plugins.plaincredentials.impl.*

      // parameters
      def jenkinsMasterKeyParameters = [
        description:  'Jenkins Master SSH Key',
        id:           'mykey',
        secret:       '',
        userName:     'jenkins',
        key:          new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(''ADD your private key here''')]

      // get Jenkins instance
      Jenkins jenkins = Jenkins.getInstance()

      // get credentials domain
      def domain = Domain.global()

      // get credentials store
      def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      // define private key
      def privateKey = new BasicSSHUserPrivateKey(
        CredentialsScope.GLOBAL,
        jenkinsMasterKeyParameters.id,
        jenkinsMasterKeyParameters.userName,
        jenkinsMasterKeyParameters.key,
        jenkinsMasterKeyParameters.secret,
        jenkinsMasterKeyParameters.description
      )

      // add credential to store
      store.addCredentials(domain, privateKey)

      // save to disk
      jenkins.save()
    user: jenkins
    password: "{{jenkins_password}}"
    
- name: Create checkbox job
  uri:
      url: "http://localhost:8080/createItem?name={{checkbox_name}}&mode=org.jenkinsci.plugins.workflow.job.WorkflowJob" 
      method: POST
      headers:
        Content-Type: application/xml
        Jenkins-Crumb: "{{crumb}}"
      body: "{{ lookup('file', './templates/config.xml' ) }}"
      user: jenkins
      password: "{{jenkins_password}}"
      force_basic_auth: yes
  register: jenkins_seed_updated
  when: not seed_exists

- name: Build Job
  uri:
      url: "http://localhost:8080/job/{{ checkbox_name }}/build"
      method: POST
      user: jenkins
      password: "{{jenkins_password}}"
      force_basic_auth: yes
      headers:
        Content-Type: application/xml
        Jenkins-Crumb: "{{crumb}}"
      status_code: 201
  # when: jenkins_seed_updated|success

- name: Check if iTrust job exists
  set_fact:
    seed_exists: "{{ iTrust_name in jobs.json.jobs|map(attribute='name')|list }}"

- name: Create iTrust job
  uri:
    url: "http://localhost:8080/createItem?name={{iTrust_name}}&mode=org.jenkinsci.plugins.workflow.job.WorkflowJob" 
    method: POST
    headers:
      Content-Type: application/xml
      Jenkins-Crumb: "{{crumb}}"
    body: "{{ lookup('file', './templates/iTrustConfig.xml' ) }}"
    user: jenkins
    password: "{{jenkins_password}}"
    force_basic_auth: yes
    register: jenkins_seed_updated
  when: not seed_exists

- name: Build Job
  uri:
    url: "http://localhost:8080/job/{{ iTrust_name }}/build"
    method: POST
    user: jenkins
    password: "{{jenkins_password}}"
    force_basic_auth: yes
    headers:
      Content-Type: application/xml
      Jenkins-Crumb: "{{crumb}}"
    status_code: 201
  when: jenkins_seed_updated|success

- name: Update and upgrade apt packages
  become: true
  apt:
    upgrade: yes
    update_cache: yes
    cache_valid_time: 86400 #One day
  

  
  
    

  
